Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ







Звіт з лабораторної роботи №5
з дисципліни «Аналіз та рефакторинг коду»








Виконала:
ст. гр. ПЗПІ-22-8
Судакова А.Д
Перевірив:
ст. викладач кат. ПІ
Сокорчук І.П.





Харків 2024

     
     5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
     5.1 Мета роботи
     Розгорнути розроблену програмну систему на локальному середовищі, перевірити її роботу та продемонструвати функціональність бізнес-логіки, адміністрування серверної частини та IoT-клієнта, що відповідає описаним у розділі Vision & Scope вимогам.
     
     5.2 Хід роботи
     5.2.1 Частини програмної системи
     Серверна частина розроблена на C# з використанням фреймворка ASP.NET Core. Використано архітектурний підхід REST API з чітким розділенням на контролери та сервіси, що забезпечує модульність та масштабованість системи.
     API реалізовано через контролери з атрибутами [ApiController] та [Route], що забезпечують обробку HTTP-запитів (GET, POST, PUT, DELETE)
     У програмній системі використовується вбудований у ASP.NET Core механізм Dependency Injection для управління життєвим циклом сервісів та спрощення тестування. Реалізовано JWT-автентифікацію та інтеграцію з OAuth 2.0 для входу через Google та Facebook.
     У ролі СУБД використовується Microsoft SQL Server. Налаштування підключення до бази даних здійснюється через appsettings.json. Для роботи з базою даних використовується Entity Framework Core, що забезпечує автоматичну генерацію схеми бази даних, LINQ для створення типобезпечних запитів, автоматичне управління транзакціями.
     Система інтегрована з IoT-пристроями для відстеження навчальних сесій та управління концентрацією. Всі дані про навчальні сесії передаються через MQTT брокер на сервер, де вони обробляються для аналізу ефективності навчання.
     Протокол комунікації: використовується MQTT для надійного асинхронного обміну повідомленнями між IoT-пристроями та сервером.
     Безпека даних забезпечена використанням JWT токенів для захисту API. Також використовується протокол HTTPS для захищеного з'єднання та OAuth 2.0 для безпечної автентифікації через сторонні сервіси.
     
     5.2.2 Вимоги середовища та компоненти 
     Перед початком роботи необхідно переконатися, що всі необхідні компоненти встановлені та середовище відповідає вимогам:
     –  Операційна система: Windows 10 або новіша.
     –  Сервер бази даних: Microsoft SQL Server.
     –  Середовище розробки: Visual Studio 2022 з підтримкою .NET 6.0 або новіше.
     Однією з вимог є підключення до мережі інтернет, яке необхідно для з’єднання з MQTT-брокером та для встановлення бібліотек.
     Необхідні бібліотеки для серверної частини – це Microsoft.EntityFrameworkCore для зв’язку з базою даних, Microsoft.AspNetCore.Authentication.Google та Facebook для авторизації за допомогою відповідних соціальних мереж. Microsoft.AspNetCore.Authentication.JwtBearer використовується для отримання токенів при авторизації. Microsoft.EntityFrameworkCore.SqlServer є провайдером бази даних Microsoft SQL Server для Entity Framework Core. 
     Бібліотеки для налаштування IoT системи у середовищі Arduino необхідні наступні: PubSubClient, Adafruit SSD1306, Adafruit GFX, ArduinoJson.
     
     5.2.3 Опис розгортання програмної системи
     В першу чергу необхідно клонувати репозиторій із програмною системою на локальний комп'ютер за допомогою команди:
      git clone https://github.com/NureSudakovaAlona/FocusLearn.git
     
     Далі відкрити проєкт у Visual Studio.
     
     У файлі appsettings.json необхідно вказати власні параметри. Структура файлу:
      1 {
      2   "Logging": {
      3     "LogLevel": {
      4       "Default": "Information",
      5       "Microsoft.AspNetCore": "Warning"
      6     }
      7   },
      8   "AllowedHosts": "*",
      9   "ConnectionStrings": {
      10     "DefaultConnection": "YOUR CONNECTION STRING"
      11   },
      12 
      13   "Jwt": {
      14     "SecretKey": "YOUR SECRET KEY",
      15     "Issuer": "FocusLearnApp",
      16     "Audience": "FocusLearnUsers"
      17   },
      18 
      19   "Authentication": {
      20     "Facebook": {
      21       "AppId": "",
      22       "AppSecret": ""
      23     },
      24     "Google": {
      25       "ClientId": "",
      26       "ClientSecret": ""
      27     }
      28   },
      29 
      30   "Mqtt": {
      31     "BrokerAddress": "YOUR BROKER",
      32     "BrokerPort": YOUR PORT,
      33     "ClientId": "FocusLearnServer"
      34   }
      35 }
     	
     Для збереження чутливих даних локально можна скористатися командою dotnet user-secrets init. Для налаштування ключів для входу через Facebook:
      1 dotnet user-secrets set "Authentication:Facebook:AppId" "YOUR APP ID"
      2 dotnet user-secrets set "Authentication:Facebook:AppSecret" "YOUR APP SECRET"
     
     За допомогою Google:
      1 dotnet user-secrets set "Authentication:Google:ClientId" "YOUR CLIENT ID"
      2 dotnet user-secrets set "Authentication:Google:ClientSecret" "YOUR CLIENT SECRET"
       
     
     Для ініціалізації бази даних необхідно запустити проєкт та виконати метод POST/api/Admin/restore-database. У корені проєкту у папці Backups існує експортована схема БД з даними. При виклику метода використовується файл з цієї папки. Якщо папка порожня, можна вказати шлях, де розташований файл схеми БД на локальній машині.
     
     Запуск серверної частини відбувається через Visual Studio (клавіша F5 або команда dotnet run).
     Переконайтеся, що сервер доступний за адресою https://localhost:7124/swagger/index.html.
     Для тестування серверних ендпоінтів можна використовувати Swagger UI або Postman. Для перевірки успішного виконання запитів до ключових ендпоінтів, необхідно виконати, наприклад, наступні запити:
     /api/Admin/backup-database
     /api/BusinessLogic/user-statistics
     /api/IoTSession/send-session.
     
     	5.2.3 Налаштування ІоТ системи
     	Для налаштування IoT-пристрою можна використати емулятор Wokwi з розширенням Arduino, драйвери для ESP32.
     	Для доступу до ІоТ системи можна використовувати як онлайн, так і локальний брокер. На веб-сторінку Wokwi необхідно завантажити папку з назвою "IoTSystem" та у програмному коді змінити дані на власні (ssid, пароль, брокер, порт, топіки для підписки для обміну даними між сервером). 
     Для відстеження отримання та відправки повідомлень можна використати MQTT Explorer та підписатися на відповідні топіки. 
     	Для тестування ІоТ системи необхідно запустити сервер та ІоТ пристрій, дочекатися його успішного підключення до мережі WiFi та MQTT і надіслати дані з серверу за допомогою ендпоінту /api/IoTSession/send-session.


     5.3 Висновки
     У процесі виконання лабораторної роботи було успішно розгорнуто програмну систему, що складається з серверної частини, бази даних, MQTT-брокера та IoT-клієнта. Всі компоненти були налаштовані відповідно до попередньо розроблених технічних вимог і забезпечили належний рівень інтеграції та взаємодії.
     	
     Посилання на відео-захист: https://youtu.be/r_D8holFp-E 
