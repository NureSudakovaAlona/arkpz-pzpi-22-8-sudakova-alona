Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ





Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»







Виконала: 
ст. гр. ПЗПІ-22-8
Судакова А.Д.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П


Харків 2024
     Тема: Основні рекомендації написання коду для мови програмування TypeScript
     Мета роботи: Дослідити рекомендації щодо написання коду обраної мови програмування, підготувати презентацію з опрацьованого матеріалу.

     Основні рекомендації написання коду для TypeScript:
1) Рекомендація: Використовувати регістр camelCase для назв змінних, функцій, членів класів та інтерфейсів, методів та їх параметрів.
Опис: Дотримання узгодження імен (naming convention) забезпечує узгодженість кодової бази та зменшує витрати на обмірковування того, як назвати змінну.
  Приклад:

// Поганий приклад
let FooVar;
function BarFunc() { }

class Foo {
  Bar: number;
  Baz() { }
}

      // Гарний приклад
let fooVar;
function barFunc() { }

	class Foo {
  bar: number;
  baz() { }
}
2) Рекомендація: Використовувати регістр PascalCase для імен класів, імен інтерфейсів, перерахувань (enum), проте camelCase для членів перерахувань (enum members).
Опис: Дотримання узгодження імен зменшує витрати на обмірковування того, як назвати змінну. Також спрощує роботу з програмним кодом для інших розробників.

  
  Приклад:
      // Поганий приклад
      class foo { }
      
      enum notificationTypes {
        Default = 0,
        Success = 1,
        Error = 2
      }
      
      // Гарний приклад
      class Foo { }
      
      enum NotificationTypes {
        default = 0,
        success = 1,
        error = 2
      }


3) Рекомендація: Використовувати оператор let замість var.
Опис: Використання let забезпечує коректне оголошення локальних змінних з блоковою видимістю, що запобігає потенційним помилкам, пов'язаним з глобальними змінними або багатократним використанням одного імені змінної. 
Приклад:

// Поганий приклад
var x = 10;
if (true) {
  var x = 20;  // змінна x змінюється
}
console.log(x); // 20
// Гарний приклад
let y = 10;
if (true) {
  let y = 20;  // змінна y локальна
}
console.log(y); // 10

1) 
4) Рекомендація: Використовувати типізацію.
Опис: TypeScript є мовою з суворою типізацією, що покращує читабельність та забезпечує надійний код. 
Приклад:
// Поганий приклад 
let message = "Hello, world!"; // Не вказано тип 
// Гарний приклад 
let message: string = "Hello, world!"; // Вказано тип string

5) Рекомендація: Не додавати непотрібний контекст.
Опис: Якщо назва класу/типу/об'єкта говорить сама за себе, не варто повторювати її у назві змінної.
  Приклад:
   // Поганий приклад:
	type Car = {
  carMake: string;
  carModel: string;
  carColor: string;
}
function print(car: Car): void {
  console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);
}

// Гарний приклад:
type Car = {
  make: string;
  model: string;
  color: string;
}
function print(car: Car): void {
  console.log(`${car.make} ${car.model} (${car.color})`);
}

6) Рекомендація: Уникати негативних умовних речень.
Опис: Заперечні умови в блоках коду здебільшого важко читати і розуміти, особливо коли виникає подвійне заперечення в умові. Виражаючи умовну логіку в позитивних термінах, покращиться читабельність коду і полегшиться розуміння передбачуваної поведінки.
  Приклад:
// Поганий приклад
function isNotAdmin(user: User): boolean {
  return user.role !== 'admin';
}
if (!isNotLoggedIn) {
  // Зробити щось, якщо війшов у систему
} else {
  // Зробити щось, якщо не війшов у систему
}

// Гарний приклад
function isAdmin(user: User): boolean {
  return user.role === 'admin';
}
if (isLoggedIn) {
  // Зробити щось, якщо війшов у систему
} else {
  // Зробити щось, якщо не війшов у систему
}


7) Рекомендація: Використовувати принцип єдиної відповідальності (single-responsibility principle).
Опис: Згідно з принципом єдиної відповідальності, класи, модулі та функції повинні відповідати лише за одну дію і мати лише одну причину для змін.
Приклад:
// Поганий приклад
class Student {
  public createStudentAccount(){
    // логіка створення акаунта студента
  }
  public calculateStudentGrade(){
    // логіка обчислення оцінок студента
  }
  public generateStudentData(){
    // логіка генерації даних про студента
  }
}

У цьому класі Student одночасно відповідає за декілька задач, отже зміна одного аспекту може ненавмисно вплинути на інші, що ускладнює підтримку, розвиток коду, а також розуміння структури програми іншими розробниками.

// Гарний приклад
class StudentAccount {
  public createStudentAccount(){
    // логіка створення акаунта студента
  }
}
class StudentGrade {
  public calculateStudentGrade(){
    // логіка обчислення оцінок студента
  }
}
class StudentData {
  public generateStudentData(){
    // логіка генерації даних про студента
  }
}
8) Рекомендація: Уникати тип «any», коли це можливо, оскільки він обходить перевірки компілятора.
Опис: Тип «any» дозволяє змінній мати будь-яке значення, і це обмежує можливості компілятора перевіряти помилки типів. Це може призвести до складніших проблем, тому варто використовувати конкретні типи, щоб зберігати строгість і передбачуваність коду.
Приклад:
// Поганий приклад
let message: any = "Hello, world!";
message = 123; // Не видасть помилку

// Гарний приклад
let message: string = "Hello, world!";
// message = 123; // Це призведе до помилки під час компіляції


     Висновки: Під час виконання практичного завдання було дослідженно історію створення та особливості мови програмування TypeScript, а також опановано основні правила та рекомендації по оформленню програмного коду для обраної мови програмування.



     Список використаних джерел:
     1. Галочка В. Мова програмування TypeScript: від хайпу до стандарту розробки. High Bar Journal. URL: https://journal.gen.tech/post/typescript-vid-hajpu-do-standartu-rozrobki (дата звернення: 03.10.2024).
     2. Ткачук Д. TypeScript це JavaScript на стероїдах. Друкарня. URL: https://drukarnia.com.ua/articles/typescript-ce-javascript-na-steroyidakh-uAxV2 (дата звернення: 03.10.2024).
     3. Akintoye G. Clean code in typescript – an introduction. Medium. URL: https://medium.com/@infistem/clean-code-in-typescript-an-introduction-66b1cbefbba7 (дата звернення: 03.10.2024).
     4. Elmogy E. SOLID principles using typescript. Medium. URL: https://medium.com/tradeling/solid-principles-using-typescript-d9d705be7d48 (дата звернення: 03.10.2024).
     5. Follow TypeScript best practices - AWS Prescriptive Guidance. URL: https://docs.aws.amazon.com/prescriptive-guidance/latest/best-practices-cdk-typescript-iac/typescript-best-practices.html (дата звернення: 03.10.2024).
     6. Le K. Clean Code in TypeScript. Medium. URL: https://javascript.plainenglish.io/clean-code-in-typescript-a183d43f3bf0 (дата звернення: 03.10.2024).




Додаток


















