Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ





Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»







Виконала: 
ст. гр. ПЗПІ-22-8
Судакова А.Д.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П


Харків 2024
     1.1 Тема
     Основні рекомендації написання коду для мови програмування TypeScript.
     1.2 Мета роботи
     Дослідити рекомендації щодо написання коду обраної мови програмування, підготувати презентацію з опрацьованого матеріалу.
	1.3 Хід роботи
     Основні рекомендації написання коду для TypeScript:
1) Рекомендація: Використовувати регістр camelCase для назв змінних, функцій, членів класів та інтерфейсів, методів та їх параметрів.
Опис: Дотримання узгодження імен (naming convention) забезпечує узгодженість кодової бази та зменшує витрати на обмірковування того, як назвати змінну.
  Приклад:

1 // Поганий приклад
2 let FooVar;
3 function BarFunc() { }
4 	
5 class Foo {
6   Bar: number;
7   Baz() { }
8 }
9
10 // Гарний приклад
11 let fooVar;
12 function barFunc() { }
13 
14 class Foo {
15   bar: number;
16   baz() { }
17 }


2) Рекомендація: Використовувати регістр PascalCase для імен класів, імен інтерфейсів, перерахувань (enum), проте camelCase для членів перерахувань (enum members).
Опис: Дотримання узгодження імен зменшує витрати на обмірковування того, як назвати змінну. Також спрощує роботу з програмним кодом для інших розробників.

  Приклад:
      
1 // Поганий приклад
2 class foo { }
3 
4 enum notificationTypes {
5    Default = 0,
6    Success = 1,
7    Error = 2
8  }
9 
10 // Гарний приклад
11 class Foo { }
12 
13 enum NotificationTypes {
14   default = 0,
15   success = 1,
16   error = 2
17 }

3) Рекомендація: Використовувати оператор let замість var.
Опис: Використання let забезпечує коректне оголошення локальних змінних з блоковою видимістю, що запобігає потенційним помилкам, пов'язаним з глобальними змінними або багатократним використанням одного імені змінної. 
Приклад:

1 // Поганий приклад
2 var x = 10;
3 if (true) {
4   var x = 20;  // змінна x змінюється
5 }
6 console.log(x); // 20
7
8 // Гарний приклад
9 let y = 10;
10 if (true) {
11   let y = 20;  // змінна y локальна
12 }
13 console.log(y); // 10
1) 
4) Рекомендація: Використовувати типізацію.
Опис: TypeScript є мовою з суворою типізацією, що покращує читабельність та забезпечує надійний код. 
Приклад:
1 // Поганий приклад 
2 let message = "Hello, world!"; // Не вказано тип 
3
4 // Гарний приклад 
5 let message: string = "Hello, world!"; // Вказано тип string

5) Рекомендація: Не додавати непотрібний контекст.
Опис: Якщо назва класу/типу/об'єкта говорить сама за себе, не варто повторювати її у назві змінної.
  Приклад:
1 // Поганий приклад:
2 	type Student = {
3   studentGender: string;
4   studentSurname: string;
5   studentName: string;
6 }
7 function print(student: Student): void {
8   console.log(`${student.studentGender} ${student.studentSurname} (${student.studentName})`);
9 }
10 
11 // Гарний приклад:
12 type Student = {
13   gender: string;
14   surname: string;
15   name: string;
16 }
17 function print(student: Student): void {
18   console.log(`${student.gender} ${student.surname} (${student.name})`);
19 }

6) Рекомендація: Уникати негативних умовних речень.
Опис: Заперечні умови в блоках коду здебільшого важко читати і розуміти, особливо коли виникає подвійне заперечення в умові. Виражаючи умовну логіку в позитивних термінах, покращиться читабельність коду і полегшиться розуміння передбачуваної поведінки.
  Приклад:
1 // Поганий приклад
2 function isNotAdmin(user: User): boolean {
3   return user.role !== 'admin';
4 }
5 if (!isNotLoggedIn) {
6   // Зробити щось, якщо війшов у систему
7 } else {
8   // Зробити щось, якщо не війшов у систему
9 }
10 
11 // Гарний приклад
12 function isAdmin(user: User): boolean {
13   return user.role === 'admin';
14 }
15 if (isLoggedIn) {
16   // Зробити щось, якщо війшов у систему
17 } else {
18   // Зробити щось, якщо не війшов у систему
19 }

7) Рекомендація: Використовувати принцип єдиної відповідальності (single-responsibility principle).
Опис: Згідно з принципом єдиної відповідальності, класи, модулі та функції повинні відповідати лише за одну дію і мати лише одну причину для змін.
Приклад:
1 // Поганий приклад
2 class Student {
3   public createStudentAccount(){
4     // логіка створення акаунта студента
5   }
6   public calculateStudentGrade(){
7     // логіка обчислення оцінок студента
8   }
9   public generateStudentData(){
10     // логіка генерації даних про студента
11   }
12 }
13 
14 /* У цьому класі Student одночасно відповідає за декілька задач, зміна одного аспекту може вплинути на інші, що ускладнює підтримку, розвиток коду, розуміння структури програми іншими розробниками. */
15 
16 // Гарний приклад
17 class StudentAccount {
18   public createStudentAccount(){
19     // логіка створення акаунта студента
20   }
21 }
22 class StudentGrade {
23   public calculateStudentGrade(){
24     // логіка обчислення оцінок студента
25   }
26 }
27 class StudentData {
28   public generateStudentData(){
29     // логіка генерації даних про студента
30   }
31 }

8) Рекомендація: Уникати тип «any», коли це можливо, оскільки він обходить перевірки компілятора.
Опис: Тип «any» дозволяє змінній мати будь-яке значення, і це обмежує можливості компілятора перевіряти помилки типів. Це може призвести до складніших проблем, тому варто використовувати конкретні типи, щоб зберігати строгість і передбачуваність коду.
Приклад:
1 // Поганий приклад
2 let message: any = "Hello, world!";
3 message = 123; // Не видасть помилку
4 
5 // Гарний приклад
6 let message: string = "Hello, world!";
7 // message = 123; // Це призведе до помилки під час компіляції

     Висновки: Під час виконання практичного завдання було дослідженно історію створення та особливості мови програмування TypeScript, а також опановано основні правила та рекомендації по оформленню програмного коду для обраної мови програмування.
	Посилання на відеозапис: https://youtu.be/iFFfV-_64hE



     Список використаних джерел:
     1. Галочка В. Мова програмування TypeScript: від хайпу до стандарту розробки. High Bar Journal. URL: https://journal.gen.tech/post/typescript-vid-hajpu-do-standartu-rozrobki (дата звернення: 03.10.2024).
     2. Ткачук Д. TypeScript це JavaScript на стероїдах. Друкарня. URL: https://drukarnia.com.ua/articles/typescript-ce-javascript-na-steroyidakh-uAxV2 (дата звернення: 03.10.2024).
     3. Akintoye G. Clean code in typescript – an introduction. Medium. URL: https://medium.com/@infistem/clean-code-in-typescript-an-introduction-66b1cbefbba7 (дата звернення: 03.10.2024).
     4. Elmogy E. SOLID principles using typescript. Medium. URL: https://medium.com/tradeling/solid-principles-using-typescript-d9d705be7d48 (дата звернення: 03.10.2024).
     5. Follow TypeScript best practices - AWS Prescriptive Guidance. URL: https://docs.aws.amazon.com/prescriptive-guidance/latest/best-practices-cdk-typescript-iac/typescript-best-practices.html (дата звернення: 03.10.2024).
     6. Le K. Clean Code in TypeScript. Medium. URL: https://javascript.plainenglish.io/clean-code-in-typescript-a183d43f3bf0 (дата звернення: 03.10.2024).




Додаток А


Рисунок А.1 – Титульний слайд презентації


Рисунок А.2 – Зміст презентації

Рисунок А.3 – Визначення «TypeScript» з офіційного сайту


Рисунок А.4 – Основна інформація щодо створення TypeScript

Рисунок А.5 – Статистика найпопулярніших технологій у 2024 році


Рисунок А.6 – Статистика розробників, бажаючих працювати з TypeScript

Рисунок А.7 – Головні відмінні риси TypeScript від JavaScript


Рисунок А.8 – Рекомендація щодо використання регістру camelCase

Рисунок 9 – Рекомендація щодо використання регістру PascalCase


Рисунок А.10 – Рекомендація використовувати оператор let замість var


Рисунок А.11 – Рекомендація використовувати типізацію


Рисунок А.12 – Рекомендації щодо уникнення непотрібного контексту


Рисунок А.13 – Рекомендація щодо уникнення негативних умовних речень


Рисунок А.14 – Приклад використання одного з SOLID принципів


Рисунок А.15 – Рекомендація уникати тип «any», де це можливо


Рисунок А.16 – Висновки щодо рекомендацій по оформленню коду


Рисунок А.17 – Використані джерела під час підготовки презентації


Рисунок А.18 – Завершальний слайд «Дякую за увагу!»
