//рекомендація 1 - регістр camelCase 
// Поганий приклад
let FooVar;
function BarFunc() { }
class Foo {
  Bar: number;
  Baz() { }
}

// Гарний приклад
let fooVar;
function barFunc() { }
class Foo {
  bar: number;
  baz() { }
}


//рекомендація 2 - PascalCase
// Поганий приклад
class foo { }
enum notificationTypes {
  Default = 0,
  Success = 1,
  Error = 2
}

// Гарний приклад
class Foo { }
enum NotificationTypes {
  default = 0,
  success = 1,
  error = 2
}


//рекомендація 3 - оператор let замість var
// Поганий приклад
var x = 10;
if (true) {
  var x = 20;  // змінна x змінюється
}
console.log(x); // 20

// Гарний приклад
let y = 10;
if (true) {
  let y = 20;  // змінна y локальна
}
console.log(y); // 10 


//рекомендація 4 - використовувати типізацію
// Поганий приклад 
let message = "Hello, world!"; // Не вказано тип 
// Гарний приклад 
let message: string = "Hello, world!"; // Вказано тип string


//рекомендація 5 - не додавати непотрібний контекст
// Поганий приклад:
	type Car = {
  carMake: string;
  carModel: string;
  carColor: string;
}
function print(car: Car): void {
  console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);
}

// Гарний приклад:
type Car = {
  make: string;
  model: string;
  color: string;
}
function print(car: Car): void {
  console.log(`${car.make} ${car.model} (${car.color})`);
}


//рекомендація 6 - уникати негативних умовних речень
// Поганий приклад
function isNotAdmin(user: User): boolean {
  return user.role !== 'admin';
}
if (!isNotLoggedIn) {
  // Зробити щось, якщо війшов у систему
} else {
  // Зробити щось, якщо не війшов у систему
}

// Гарний приклад
function isAdmin(user: User): boolean {
  return user.role === 'admin';
}
if (isLoggedIn) {
  // Зробити щось, якщо війшов у систему
} else {
  // Зробити щось, якщо не війшов у систему
}


//рекомендація 7 - використовувати принцип єдиної відповідальності (single-responsibility principle)
// Поганий приклад
class Student {
  public createStudentAccount(){
    // логіка створення акаунта студента
  }
  public calculateStudentGrade(){
    // логіка обчислення оцінок студента
  }
  public generateStudentData(){
    // логіка генерації даних про студента
  }
}

// Гарний приклад
class StudentAccount {
  public createStudentAccount(){
    // логіка створення акаунта студента
  }
}
class StudentGrade {
  public calculateStudentGrade(){
    // логіка обчислення оцінок студента
  }
}
class StudentData {
  public generateStudentData(){
    // логіка генерації даних про студента
  }
}


//рекомендація 8 - уникати тип «any», коли це можливо
// Поганий приклад
let message: any = "Hello, world!";
message = 123; // Не видасть помилку

// Гарний приклад
let message: string = "Hello, world!";
// message = 123; // Це призведе до помилки під час компіляції
