Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ







Звіт з лабораторної роботи №2
з дисципліни «Аналіз та рефакторинг коду»








Виконала:
ст. гр. ПЗПІ-21-3 
Судакова А.Д
Перевірив:
ст. викладач кат. ПІ
Сокорчук І.П.





Харків 2024

     
     2 РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)
1 
2 
2.1 Мета роботи
     Розробити базу даних (далі БД) для серверної частини  програмної системи та прикладний програмний інтерфейс. 
     
2.2 Хід роботи
     2.2.1 Опис інженерних рішень
     Серверна частина системи буде реалізована на платформі ASP.NET Core. Мовою програмування було обрано C#. Для зберігання даних буде використовуватись Microsoft SQL Server. Для взаємодії з СУБД Microsoft SQL Server буде використовуватися наступний ORM – Entity Framework (далі EF).
     Серверна частина системи розроблена на основі архітектури Layered Architecture (багатошарової архітектури), що передбачає чіткий поділ системи на рівні. Це забезпечує масштабованість, зручність у тестуванні та розширенні функціоналу.
     Структура проєкту включає такі основні шари як контролери (Controllers): відповідають за прийом запитів від клієнтів, передачу даних на рівень сервісів, обробку відповіді; сервіси (Services) забезпечують обробку даних, звертаючись до бази даних через інтерфейси (Interfaces) (див. приклад у дод. В), які в свою чергу визначають методи, що реалізуються у відповідних сервісах. Моделі (Models) поділяються на Domain Models – сутності, що відповідають таблицям бази даних (наприклад, Assignment, LearningMaterial) та DTO Models – об’єкти для передачі даних між клієнтом і сервером (наприклад, AssignmentDTO, LearningMaterialDTO).

	2.2.2 Розробка UML діаграми прецедентів (Use Case Diagram)
	UML діаграма прецедентів розроблена для ілюстрації основних сценаріїв взаємодії користувачів із системою. У програмній системі мають місце чотири актори: Адміністратор, Репетитор, Учень і IoT-пристрій. Взаємодії акторів із системою наступні:
     Для адміністратора:
- Додавання методик концентрації.
- Редагування методик концентрації.
- Видалення методик концентрації.
- Управління користувачами системи.
     Для репетитора:
- Додавання навчальних матеріалів.
- Редагування навчальних матеріалів.
- Видалення навчальних матеріалів.
- Додавання завдань.
- Редагування завдань.
- Оцінювання виконаних завдань.
     Для учня:
- Перегляд навчальних матеріалів.
- Завантаження виконаних завдань.
- Перегляд оцінок.
     Для IoT-пристрою:
- Відстеження часу концентрації та перерв.
- Запис статистики сесій.
     Узагальнена діаграма прецедентів представлена на рис. 1.
     

Рисунок 1 – UML діаграма прецедентів
2.2.3 Розробка ER-моделі даних (Entity–Relationship Model)
     ER-модель складається з 6 сутностей: 
     – «Користувач»: з такими атрибутами, як ім’я, адреса електроної пошти, роль (студент, репетитор, адміністратор), ідентифікатор провайдера (для збереження унікального номеру підключення через соціальні мережі), провайдер («Google», «Facebook»), фото профіля (для збереження посилання на фото користувача), мова/регіон, статус профіля («Active», «Inactive»), дата створення профіля;
     – «Завдання»: з такими атрибутами, як назва завдання, опис завдання, посилання на файл (з виконаним завданням), статус завдання («Pending», «In progress», «Completed»), дата створення, оцінка від репетитора, дата оновлення;
     – «Навчальний матеріал»: з такими атрибутами, як назва матеріалу, опис матеріалу, посилання на завантажений файл (з вмістом завдання), дата додавання; 
     – «Методика концентрації»: з такими атрибутами, як назва методики, опис методики, тривалість роботи (у хвилинах – тривалість робочої сесії), тривалість перерви (у хвилинах), дата додавання; 
     – «ІоТ-сесія»: з такими атрибутами, як час початку сесії, час кінця сесії, тип сесії («Concentration», «Break»), тривалість сесії (розраховане значення – різниця часу кінця сесії та її початку); 
     – «Статистика»: з такими атрибутами, як дата початку періоду, тип періоду («Day», «Week», «Month»), загальний час концентрації (сума тривалості сесій за певною методикою), кількість перерв, пропущені перерви (кількість), дата останнього оновлення.
     Взаємозв’язки між цими сутностями наступні:
     – «Користувач» - «Завдання» та «Користувач» - «Навчальний матеріал»: зв'язок «один-до-багатьох» – у користувача в ролі репетитора може бути багато завдань/навчальних матеріалів, у одного завдання/навчального матеріалу може бути тільки один користувач;
     – «Користувач» - «ІоТ-сесія» та «Користувач» - «Статистика»: зв'язок «один-до-багатьох» – у користувача може бути багато ІоТ-сесій та звітів зі статистики (відповідно до різних методик концентрації, що використовувалися користувачем) та до відповідних сесій/статистичних звітів може бути прив'язаний тільки один користувач;
     – «Методика концентрації» - «ІоТ-сесія» та «Методика концентрації» - «Статистика»: зв'язок «один-до-багатьох» – для однієї методики концентрації можливі багато ІоТ-сесій та звітів зі статистикою стосовно використання цієї методики та для певних ІоТ-сесії та статистичного звіту стосується тільки однієї методики концентрації;
     – «Навчальний матеріал» - «Методика концентрації»: зв'язок «один-до-багатьох» - з одним навчальним матеріалом (лекція, нотатки та ін.) може бути пов'язано багато завдань та певне завдання може асоціюватися з одним навчальним матеріалом.


ER-модель зображена на рис. 2. 

Рисунок 2 – ER діаграма даних
	
	2.2.4 Розробка бази даних (БД) програмної системи
     Для реалізації бази даних використано Microsoft SQL Server. Було створено таблиці відповідно до ER-діаграми, а також налаштовано зовнішні ключі для забезпечення зв'язків між сутностями. Скрипт на створення таблиць надано у дод. А.


     2.2.5 Створення діаграми структури БД
     На рис. 3 зображено діаграму структури розробленої БД FocusLearnDB.
   
     Рисунок 3 – Схема БД FocusLearnDB
     
     2.2.6 Розробка функцій роботи з БД
     Всі основні функції (CRUD) реалізовані за допомогою EF.
     Налаштовано взаємодію з усіма таблицями БД, за винятком пов'язаних з ІоТ-сесіями та статистик для кожного користувача (бізнес-логіка), реалізація взаємодії з якими планується при виконанні наступних лабораторних робіт.
     
     2.2.7 Логіка взаємодії серверної частини з БД та клієнтами
     У розробленій програмній системі серверна частина забезпечує взаємодію між клієнтами та базою даних за допомогою API. Для цього використовуються контролери, які отримують запити від клієнтів, обробляють їх за допомогою відповідних сервісів, що взаємодіють із базою даних через ORM Entity Framework. Логіка взаємодії поділяється на два основні рівні: логіка взаємодії з БД – реалізується за допомогою сервісів, що працюють із таблицями бази даних; логіка взаємодії з клієнтами – забезпечується контролерами, які обробляють HTTP-запити клієнтів і формують відповіді.
     Для взаємодії з базою даних використовуються сервіси, які містять методи для виконання CRUD-операцій. Наприклад, отримання всіх навчальних матеріалів реалізовано наступним чином:
     
     1 /// <summary>
     2 /// Отримати всі навчальні матеріали
     3 /// </summary>
     4 public async Task<IEnumerable<LearningMaterialDTO>> GetAllMaterialsAsync()
     5 {
     6     return await _context.LearningMaterials
     7         .Select(l => new LearningMaterialDTO
     8         {
     9             Title = l.Title,
     10             Description = l.Description,
     11             FileLink = l.FileLink
     12         })
     13         .ToListAsync();
     14 }
     
     У цьому методі використовуються LINQ-запити до бази даних для отримання інформації про навчальні матеріали. 
     Далі відбувається маппінг отриманих даних у DTO для зручного повернення клієнту.
     Контролери відповідають за обробку запитів клієнтів. Наприклад, для отримання навчальних матеріалів, що стосуються поточного користувача використовується ендпоінт, наведений у дод. В. У цьому методі ідентифікатор користувача витягується з токена, що передається в запиті. Далі викликається відповідний метод сервісу для отримання даних із бази і, якщо дані знайдені, вони повертаються клієнту у форматі JSON.
     Логіка взаємодії серверної частини з БД та клієнтами реалізована через взаємодію контролерів, сервісів і бази даних. Завдяки цьому вдалося забезпечити структуровану архітектуру, яка дозволяє легко масштабувати та підтримувати систему.
     Використання Entity Framework як ORM спростило написання SQL-запитів і дозволило зосередитися на логіці застосунку, а DTO забезпечують зручний формат даних для передачі клієнтам.
     
     2.2.8 Специфікація розробленого API 
     Специфікація розробленого API наведена у додатку Б. Специфікація складається з 27 ендпоінтів. У таблицях додатку наведені шлях, метод, вхідні параметри та опис запитів. 
     Для деяких ендпоінтів специфікацію буде доповнено при виконанні наступних лабораторних робіт, пов’язаних з реалізацією бізнес-логіки та функцій адміністрування.
     
	
     


     2.3 Висновки
     В результаті виконання даної лабораторної роботи було розроблено базу даних для серверної частини «Програмної системи для оптимізації процесу неформальної освіти». 
     Описано прийняті інженерні рішення, розроблені діаграми, що ілюструють загальну архітектуру системи та структуру бази даних. Функції роботи з БД протестовано за допомогою Swagger.
     	Посилання на відео-захист: https://youtu.be/DVLhaIKESAI 

ДОДАТОК А
Скрипт на створення таблиць у БД FocusLearnDB

CREATE TABLE [User] (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    UserName NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) NOT NULL,
    Role NVARCHAR(20) CHECK (Role IN ('Student', 'Tutor', 'Admin')),
    ProfilePhoto NVARCHAR(MAX) NULL,
    Language NVARCHAR(20) NULL,
    ProfileStatus NVARCHAR(20) CHECK (ProfileStatus IN ('Active', 'Inactive')),
    AuthProvider NVARCHAR(50) NULL, 
    ProviderId NVARCHAR(100) NULL,
    RegistrationDate DATETIME DEFAULT GETDATE()
);

CREATE TABLE Assignment (
    AssignmentId INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX) NULL,
    FileLink NVARCHAR(MAX) NULL,
    StudentId INT NULL,
    TutorId INT NOT NULL,
    Status NVARCHAR(50) CHECK (Status IN ('Pending', 'InProgress', 'Completed')),
    DueDate DATETIME NULL,
    CreatedAt DATETIME DEFAULT GETDATE(),
    Rating TINYINT NULL,
    UpdatedAt DATETIME NULL,
    TaskId INT NULL,
    FOREIGN KEY (StudentId) REFERENCES [User](UserId),
    FOREIGN KEY (TutorId) REFERENCES [User](UserId),
    FOREIGN KEY (TaskId) REFERENCES LearningMaterial(MaterialId)
);

CREATE TABLE LearningMaterial (
    MaterialId INT IDENTITY(1,1) PRIMARY KEY,
    CreatorId INT NOT NULL,
    Title NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX) NULL,
    FileLink NVARCHAR(MAX) NULL,
    AddedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CreatorId) REFERENCES [User](UserId)
);

CREATE TABLE ConcentrationMethod (
    MethodId INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX) NULL,
    WorkDuration INT NOT NULL, 
    BreakDuration INT NOT NULL, 
    CreatedAt DATETIME DEFAULT GETDATE(),
);

CREATE TABLE IoTSession (
    SessionId INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL,
    MethodId INT NOT NULL,
    SessionType NVARCHAR(20) CHECK (SessionType IN ('Concentration', 'Break')),
    StartTime DATETIME NOT NULL,
    EndTime DATETIME NULL,
    Duration AS DATEDIFF(MINUTE, StartTime, EndTime), -- Calculated field
    FOREIGN KEY (UserId) REFERENCES [User](UserId),
    FOREIGN KEY (MethodId) REFERENCES ConcentrationMethod(MethodId)
);

CREATE TABLE UserMethodStatistics (
    StatisticId INT PRIMARY KEY IDENTITY(1,1),
    UserId INT NOT NULL,
    MethodId INT NOT NULL,
    PeriodStartDate DATE NOT NULL,
    PeriodType NVARCHAR(10) NOT NULL CHECK (PeriodType IN ('Day', 'Week', 'Month')),
    TotalConcentrationTime INT NOT NULL, 
    BreakCount INT NOT NULL DEFAULT 0,        
    MissedBreaks INT NOT NULL DEFAULT 0,      
    LastUpdated DATETIME NOT NULL DEFAULT GETDATE(), 
    FOREIGN KEY (UserId) REFERENCES [User](UserId),
    FOREIGN KEY (MethodId) REFERENCES ConcentrationMethod(MethodId)
);



ДОДАТОК Б
Специфікація розробленого API

Таблиця Б.1 – Маршрут /api/Auth/
Посилання
Метод
Параметри
Опис
login-google
GET
returnUrl
Авторизація за допомогою Google акаунту
google-response
GET
returnUrl
Перенаправлення 
login-facebook
GET
returnUrl
Авторизація за допомогою Facebook акаунту
facebook-response
GET
returnUrl
Перенаправлення

Таблиця Б.2 – Маршрут /api/Users/
Посилання
Метод
Параметри
Опис
my-profile
GET
Bearer Token, userId
Отримання інформації про особистий акаунт
my-profile
PUT
Bearer Token, userId
Редагування особистого профілю
my-profile
DELETE
Bearer Token, userId
Видалення особистого профілю
{id}
GET
Bearer Token, userId
Отримання запису користувача за його ідентифікатором

GET
Bearer Token
Отримання записів всіх користувачів (доступно лише 
для адміністраторів)

GET
Bearer Token
Отримання записів всіх репетиторів (для зручності студентів)

Таблиця Б.3 – Маршрут /api/Assignments/
Посилання
Метод
Параметри
Опис

GET
Bearer Token
Отримання записів всіх завдань (доступно тільки для адміністраторів)

POST
Bearer Token
Додавання завдання (доступно для адміністраторів та репетиторів)
my-assignments
GET
Bearer Token
Отримання всіх завдань поточного користувача
{id}
GET
Bearer Token, assignmentId
Отримання запису завдання за його ідентифікатором
{id}
PUT
Bearer Token, assignmentId
Редагування запису завдання
{id}
DELETE
Bearer Token, assignmentId
Видалення запису завдання


Таблиця Б.4 – Маршрут /api/ConcentrationMethods/
Посилання
Метод
Параметри
Опис

GET
Bearer Token
Отримання записів всіх методів концентрації

POST
Bearer Token
Додавання методики концентрації (доступно тільки для адміністраторів)
{id}
GET
Bearer Token, methodId
Отримання запису методики концентрації за його ідентифікатором
{id}
PUT
Bearer Token, methodId
Редагування запису методики концентрації (доступно тільки для адміністраторів)
{id}
DELETE
Bearer Token, methodId
Видалення запису методики концентрації (доступно тільки для адміністраторів)

Таблиця Б.5 – Маршрут /api/LearningMaterials/
Посилання
Метод
Параметри
Опис

GET
Bearer Token
Отримання записів всіх навчальних матеріалів

POST
Bearer Token
Додавання навчального матеріалу (доступно для адміністраторів та репетиторів)
my-materials
GET
Bearer Token
Отримання всіх навчальних матеріалів поточного користувача
{id}
GET
Bearer Token, materialId
Отримання навчального матеріалу за його ідентифікатором
{id}
PUT
Bearer Token, materialId
Редагування навчального матеріалу (доступно тільки адміністраторам та репетиторам)
{id}
DELETE
Bearer Token, materialId
Видалення навчального матеріалу (доступно для адміністраторів та репетиторів)



ДОДАТОК В
Фрагменти коду

Інтерфейс сервісу LearningMaterialsService:
     1 using FocusLearn.Models.Domain;
     2 using FocusLearn.Models.DTO;
     3 
     4 namespace FocusLearn.Repositories.Abstract
     5 {
     6     public interface ILearningMaterialService
     7     {
     8         Task<IEnumerable<LearningMaterialDTO>> GetAllMaterialsAsync();
     9         Task<LearningMaterialDTO?> GetMaterialByIdAsync(int id);
     10         Task AddMaterialAsync(int creatorId, LearningMaterialDTO materialDto);
     11         Task<bool> UpdateMaterialAsync(int id, LearningMaterialDTO materialDto);
     12         Task<bool> DeleteMaterialAsync(int id);
     13     }
     14 }

     Код ендпоінту для отримання навчальних матеріалів поточного користувача:
     1 /// <summary>
     2 /// Отримати всі матеріали поточного користувача
     3 /// </summary>
     4 [HttpGet("my-materials")]
     5 public async Task<IActionResult> GetMyMaterials()
     6 {
     7 var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier) ??
     8 	User.FindFirst("sub") ??
     9 	User.FindFirst("UserId");
     10 
     11 	if (userIdClaim == null)
     12 	{
     13 	return Unauthorized("User ID not found in token");
     14 	}
     15 
     16 var userId = int.Parse(userIdClaim.Value);
     17 
     18 var allMaterials = await _service.GetAllMaterialsAsync();
     19 
     20 // Фільтруємо матеріали за ідентифікатором користувача
     21 var userMaterials = allMaterials
     22   .Where(a => a.CreatorId == userId)
     23   .ToList();
     24 
     25 	if (userMaterials == null || !userMaterials.Any())
     26   {
     27   return NotFound("You don't have any materials.");
     28   }
     29   return Ok(userMaterials);
     30   }








